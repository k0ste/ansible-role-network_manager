---
- name: "NetworkManager | Add the OS specific variables"
  ansible.builtin.include_vars:
    file: "{{ hostvars[inventory_hostname]['ansible_os_family'] + '.yml' }}"
- name: "NetworkManager | Set facts about NetworkManager"
  ansible.builtin.set_fact:
    network_manager_settings:
      "{{ hostvars[inventory_hostname]['network_manager'] |
      community.general.json_query('[].settings[]') }}"
    network_manager_ifup_global:
      "{{ hostvars[inventory_hostname]['network_manager'] |
      community.general.json_query('[].ifup_global | [0]') }}"
    network_manager_ifup_local:
      "{{ hostvars[inventory_hostname]['network_manager'] |
      community.general.json_query('[].interfaces[].ifup_local') }}"
    network_manager_ifdown_local:
      "{{ hostvars[inventory_hostname]['network_manager'] |
      community.general.json_query('[].interfaces[].ifdown_local') }}"
    network_manager_interface_settings:
      "{{ hostvars[inventory_hostname]['network_manager'] |
      community.general.json_query('[].interfaces[]') }}"
    network_manager_interfaces:
      "{{ hostvars[inventory_hostname]['network_manager'] |
      community.general.json_query('[].interfaces[].interface') }}"
    network_manager_ppp_secrets:
      "{{ hostvars[inventory_hostname]['network_manager'] |
      community.general.json_query('[].interfaces[].ppp_user') }}"
- name: "NetworkManager | Find exists network profiles"
  ansible.builtin.find:
    paths: "{{ hostvars[inventory_hostname]['network_manager_sysconfig_dest'] +
      '/' + 'network-scripts' }}"
    recurse: "no"
    file_type: "file"
    patterns: "^ifcfg-(.*)"
    use_regex: "true"
    excludes: "{{ network_manager_exclude_interfaces }}"
  when:
    - "hostvars[inventory_hostname]['network_manager'] |
       community.general.json_query(vars['network_manager_drop_exists']) is
       defined"
    - "hostvars[inventory_hostname]['network_manager'] |
       community.general.json_query(vars['network_manager_drop_exists']) ==
       'true'"
  vars:
    network_manager_drop_exists: "[] | map(&drop_exists || 'false', @) | [0]"
    network_manager_exclude_interfaces: "{{ vars['network_manager_interfaces'] |
      map('regex_replace', '^(.*)$', 'ifcfg-\\1') | list() }}"
  register: "network_manager_find_result"
- name: "NetworkManager | Delete exists network profiles"
  ansible.builtin.file:
    path: "{{ item['path'] }}"
    state: "absent"
  loop: "{{ vars['network_manager_find_result']['files'] | flatten(levels=1) }}"
  loop_control:
    label: "{{ 'Remove ' + item['path'] }}"
  when:
    - "vars['network_manager_find_result']['files'] is defined"
